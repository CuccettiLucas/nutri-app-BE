// <auto-generated />
using System;
using App_Nutri.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App_Nutri.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250620193127_UpdatePorcionGramos")]
    partial class UpdatePorcionGramos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App_Nutri.Models.Alimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Calorias")
                        .HasColumnType("float");

                    b.Property<double>("Carbohidratos")
                        .HasColumnType("float");

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Porcion")
                        .HasColumnType("float");

                    b.Property<int>("ProfesionalId")
                        .HasColumnType("int");

                    b.Property<double>("Proteinas")
                        .HasColumnType("float");

                    b.Property<int?>("SubCategoriaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("SubCategoriaId");

                    b.ToTable("Alimentos");
                });

            modelBuilder.Entity("App_Nutri.Models.AlimentoListaAlimentos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlimentoId")
                        .HasColumnType("int");

                    b.Property<int>("ListaAlimentoId")
                        .HasColumnType("int");

                    b.Property<int>("ListaAlimentosId")
                        .HasColumnType("int");

                    b.Property<decimal>("PorcionGramos")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AlimentoId");

                    b.HasIndex("ListaAlimentosId");

                    b.ToTable("AlimentoListaAlimentos");
                });

            modelBuilder.Entity("App_Nutri.Models.AlimentoPaciente", b =>
                {
                    b.Property<int>("AlimentoId")
                        .HasColumnType("int");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("AlimentoId", "PacienteId");

                    b.HasIndex("PacienteId");

                    b.ToTable("AlimentoPaciente");
                });

            modelBuilder.Entity("App_Nutri.Models.AlimentoPacientePersonalizado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlimentoId")
                        .HasColumnType("int");

                    b.Property<int>("PacienteListaPersonalizadaId")
                        .HasColumnType("int");

                    b.Property<decimal>("PorcionGramosPersonalizada")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AlimentoId");

                    b.HasIndex("PacienteListaPersonalizadaId");

                    b.ToTable("alimentoPacientePersonalizados");
                });

            modelBuilder.Entity("App_Nutri.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("App_Nutri.Models.HistoriaClinica", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("ProfesionalId")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("PacienteId");

                    b.HasIndex("ProfesionalId");

                    b.ToTable("HistoriaClinica");
                });

            modelBuilder.Entity("App_Nutri.Models.ImagenesPaciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comida")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCarga")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<string>("UrlImagen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ImagenesPacientes");
                });

            modelBuilder.Entity("App_Nutri.Models.ListaAlimentos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfesionalId")
                        .HasColumnType("int");

                    b.Property<string>("avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ListasAlimentos");
                });

            modelBuilder.Entity("App_Nutri.Models.ListaAlimentosAlimento", b =>
                {
                    b.Property<int>("ListaAlimentosId")
                        .HasColumnType("int");

                    b.Property<int>("AlimentoId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("PorcionGramos")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ListaAlimentosId", "AlimentoId");

                    b.HasIndex("AlimentoId");

                    b.ToTable("ListaAlimentosAlimentos");
                });

            modelBuilder.Entity("App_Nutri.Models.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DNI")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ListaAlimentoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProfAsignadoId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ListaAlimentoId");

                    b.HasIndex("ProfAsignadoId");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("App_Nutri.Models.PacienteListaPersonalizada", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("ListaAlimentosId")
                        .HasColumnType("int");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ListaAlimentosId");

                    b.HasIndex("PacienteId");

                    b.ToTable("PacienteListaPersonalizadas");
                });

            modelBuilder.Entity("App_Nutri.Models.Profesional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatriculaMn")
                        .HasColumnType("int");

                    b.Property<int>("MatriculaMp")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Profesionales");
                });

            modelBuilder.Entity("App_Nutri.Models.RegistroAlimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlimentoId")
                        .HasColumnType("int");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<DateTime>("FechaConsumo")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlimentoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("RegistrosAlimento");
                });

            modelBuilder.Entity("App_Nutri.Models.SubCategoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("SubCategorias");
                });

            modelBuilder.Entity("App_Nutri.Models.Alimento", b =>
                {
                    b.HasOne("App_Nutri.Models.Categoria", "Categoria")
                        .WithMany("Alimentos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App_Nutri.Models.SubCategoria", "SubCategorias")
                        .WithMany("Alimentos")
                        .HasForeignKey("SubCategoriaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Categoria");

                    b.Navigation("SubCategorias");
                });

            modelBuilder.Entity("App_Nutri.Models.AlimentoListaAlimentos", b =>
                {
                    b.HasOne("App_Nutri.Models.Alimento", "Alimento")
                        .WithMany()
                        .HasForeignKey("AlimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App_Nutri.Models.ListaAlimentos", "ListaAlimentos")
                        .WithMany("Alimentos")
                        .HasForeignKey("ListaAlimentosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alimento");

                    b.Navigation("ListaAlimentos");
                });

            modelBuilder.Entity("App_Nutri.Models.AlimentoPaciente", b =>
                {
                    b.HasOne("App_Nutri.Models.Alimento", "Alimento")
                        .WithMany()
                        .HasForeignKey("AlimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App_Nutri.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alimento");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("App_Nutri.Models.AlimentoPacientePersonalizado", b =>
                {
                    b.HasOne("App_Nutri.Models.Alimento", "Alimento")
                        .WithMany()
                        .HasForeignKey("AlimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App_Nutri.Models.PacienteListaPersonalizada", "PacienteListaPersonalizada")
                        .WithMany("AlimentosPersonalizados")
                        .HasForeignKey("PacienteListaPersonalizadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alimento");

                    b.Navigation("PacienteListaPersonalizada");
                });

            modelBuilder.Entity("App_Nutri.Models.HistoriaClinica", b =>
                {
                    b.HasOne("App_Nutri.Models.Paciente", "Paciente")
                        .WithMany("HistoriaClinica")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App_Nutri.Models.Profesional", "Profesional")
                        .WithMany("HistoriaClinica")
                        .HasForeignKey("ProfesionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Profesional");
                });

            modelBuilder.Entity("App_Nutri.Models.ListaAlimentosAlimento", b =>
                {
                    b.HasOne("App_Nutri.Models.Alimento", "Alimento")
                        .WithMany("ListaAlimentosAlimentos")
                        .HasForeignKey("AlimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App_Nutri.Models.ListaAlimentos", "ListaAlimentos")
                        .WithMany("ListaAlimentosAlimentos")
                        .HasForeignKey("ListaAlimentosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alimento");

                    b.Navigation("ListaAlimentos");
                });

            modelBuilder.Entity("App_Nutri.Models.Paciente", b =>
                {
                    b.HasOne("App_Nutri.Models.ListaAlimentos", null)
                        .WithMany()
                        .HasForeignKey("ListaAlimentoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App_Nutri.Models.Profesional", null)
                        .WithMany()
                        .HasForeignKey("ProfAsignadoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("App_Nutri.Models.Anamnesis", "Anamnesis", b1 =>
                        {
                            b1.Property<int>("PacienteId")
                                .HasColumnType("int");

                            b1.Property<bool>("Alcohol")
                                .HasColumnType("bit");

                            b1.Property<int>("CantidadComidas")
                                .HasColumnType("int");

                            b1.Property<string>("Cocina")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.PrimitiveCollection<string>("DietasAnteriores")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.PrimitiveCollection<string>("Ejercicio")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.PrimitiveCollection<string>("Enfermedades")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("Fumador")
                                .HasColumnType("bit");

                            b1.Property<string>("HorarioLaboral")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.PrimitiveCollection<string>("Medicaciones")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Observaciones")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("PesoActual")
                                .HasColumnType("int");

                            b1.Property<int>("PesoHabitual")
                                .HasColumnType("int");

                            b1.Property<int>("Talla")
                                .HasColumnType("int");

                            b1.Property<bool>("TomaMedicacion")
                                .HasColumnType("bit");

                            b1.Property<string>("Trabajo")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PacienteId");

                            b1.ToTable("Pacientes");

                            b1.WithOwner()
                                .HasForeignKey("PacienteId");
                        });

                    b.OwnsOne("App_Nutri.Models.Porcion", "Porcion", b1 =>
                        {
                            b1.Property<int>("PacienteId")
                                .HasColumnType("int");

                            b1.Property<double>("Carbohidratos")
                                .HasColumnType("float");

                            b1.Property<double>("Fibras")
                                .HasColumnType("float");

                            b1.Property<double>("Proteinas")
                                .HasColumnType("float");

                            b1.HasKey("PacienteId");

                            b1.ToTable("Pacientes");

                            b1.WithOwner()
                                .HasForeignKey("PacienteId");
                        });

                    b.Navigation("Anamnesis");

                    b.Navigation("Porcion")
                        .IsRequired();
                });

            modelBuilder.Entity("App_Nutri.Models.PacienteListaPersonalizada", b =>
                {
                    b.HasOne("App_Nutri.Models.ListaAlimentos", "ListaAlimentos")
                        .WithMany("PacientesAsignados")
                        .HasForeignKey("ListaAlimentosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App_Nutri.Models.Paciente", "Paciente")
                        .WithMany("ListasPersonalizadas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ListaAlimentos");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("App_Nutri.Models.RegistroAlimento", b =>
                {
                    b.HasOne("App_Nutri.Models.Alimento", "Alimento")
                        .WithMany()
                        .HasForeignKey("AlimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App_Nutri.Models.Profesional", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alimento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("App_Nutri.Models.SubCategoria", b =>
                {
                    b.HasOne("App_Nutri.Models.Categoria", "Categoria")
                        .WithMany("SubCategorias")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("App_Nutri.Models.Alimento", b =>
                {
                    b.Navigation("ListaAlimentosAlimentos");
                });

            modelBuilder.Entity("App_Nutri.Models.Categoria", b =>
                {
                    b.Navigation("Alimentos");

                    b.Navigation("SubCategorias");
                });

            modelBuilder.Entity("App_Nutri.Models.ListaAlimentos", b =>
                {
                    b.Navigation("Alimentos");

                    b.Navigation("ListaAlimentosAlimentos");

                    b.Navigation("PacientesAsignados");
                });

            modelBuilder.Entity("App_Nutri.Models.Paciente", b =>
                {
                    b.Navigation("HistoriaClinica");

                    b.Navigation("ListasPersonalizadas");
                });

            modelBuilder.Entity("App_Nutri.Models.PacienteListaPersonalizada", b =>
                {
                    b.Navigation("AlimentosPersonalizados");
                });

            modelBuilder.Entity("App_Nutri.Models.Profesional", b =>
                {
                    b.Navigation("HistoriaClinica");
                });

            modelBuilder.Entity("App_Nutri.Models.SubCategoria", b =>
                {
                    b.Navigation("Alimentos");
                });
#pragma warning restore 612, 618
        }
    }
}
